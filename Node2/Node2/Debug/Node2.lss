
Node2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000828  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00080828  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000084  20000434  00080c5c  00020434  2**2
                  ALLOC
  3 .stack        00000400  200004b8  00080ce0  00020434  2**0
                  ALLOC
  4 .heap         00000200  200008b8  000810e0  00020434  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002045d  2**0
                  CONTENTS, READONLY
  7 .debug_info   00001f22  00000000  00000000  000204b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000006ce  00000000  00000000  000223d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000c43  00000000  00000000  00022aa6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000000f8  00000000  00000000  000236e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  000237e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001050b  00000000  00000000  000238b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002058  00000000  00000000  00033dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0004fe86  00000000  00000000  00035e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000003c8  00000000  00000000  00085ca4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	b8 08 00 20 65 01 08 00 61 01 08 00 61 01 08 00     ... e...a...a...
   80010:	61 01 08 00 61 01 08 00 61 01 08 00 00 00 00 00     a...a...a.......
	...
   8002c:	61 01 08 00 61 01 08 00 00 00 00 00 61 01 08 00     a...a.......a...
   8003c:	61 01 08 00 61 01 08 00 61 01 08 00 61 01 08 00     a...a...a...a...
   8004c:	61 01 08 00 61 01 08 00 61 01 08 00 61 01 08 00     a...a...a...a...
   8005c:	61 01 08 00 2d 06 08 00 61 01 08 00 00 00 00 00     a...-...a.......
   8006c:	61 01 08 00 61 01 08 00 61 01 08 00 61 01 08 00     a...a...a...a...
	...
   80084:	61 01 08 00 61 01 08 00 61 01 08 00 61 01 08 00     a...a...a...a...
   80094:	61 01 08 00 61 01 08 00 61 01 08 00 61 01 08 00     a...a...a...a...
   800a4:	00 00 00 00 61 01 08 00 61 01 08 00 61 01 08 00     ....a...a...a...
   800b4:	61 01 08 00 61 01 08 00 61 01 08 00 61 01 08 00     a...a...a...a...
   800c4:	61 01 08 00 61 01 08 00 61 01 08 00 61 01 08 00     a...a...a...a...
   800d4:	61 01 08 00 61 01 08 00 61 01 08 00 61 01 08 00     a...a...a...a...
   800e4:	61 01 08 00 61 01 08 00 61 01 08 00 61 01 08 00     a...a...a...a...

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000434 	.word	0x20000434
   80110:	00000000 	.word	0x00000000
   80114:	00080828 	.word	0x00080828

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00080828 	.word	0x00080828
   80154:	20000438 	.word	0x20000438
   80158:	00080828 	.word	0x00080828
   8015c:	00000000 	.word	0x00000000

00080160 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80160:	e7fe      	b.n	80160 <Dummy_Handler>
	...

00080164 <Reset_Handler>:
{
   80164:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
   80166:	4b18      	ldr	r3, [pc, #96]	; (801c8 <Reset_Handler+0x64>)
   80168:	4a18      	ldr	r2, [pc, #96]	; (801cc <Reset_Handler+0x68>)
   8016a:	429a      	cmp	r2, r3
   8016c:	d010      	beq.n	80190 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
   8016e:	4b18      	ldr	r3, [pc, #96]	; (801d0 <Reset_Handler+0x6c>)
   80170:	4a15      	ldr	r2, [pc, #84]	; (801c8 <Reset_Handler+0x64>)
   80172:	429a      	cmp	r2, r3
   80174:	d20c      	bcs.n	80190 <Reset_Handler+0x2c>
   80176:	3b01      	subs	r3, #1
   80178:	1a9b      	subs	r3, r3, r2
   8017a:	f023 0303 	bic.w	r3, r3, #3
   8017e:	3304      	adds	r3, #4
   80180:	4413      	add	r3, r2
   80182:	4912      	ldr	r1, [pc, #72]	; (801cc <Reset_Handler+0x68>)
                        *pDest++ = *pSrc++;
   80184:	f851 0b04 	ldr.w	r0, [r1], #4
   80188:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
   8018c:	429a      	cmp	r2, r3
   8018e:	d1f9      	bne.n	80184 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
   80190:	4b10      	ldr	r3, [pc, #64]	; (801d4 <Reset_Handler+0x70>)
   80192:	4a11      	ldr	r2, [pc, #68]	; (801d8 <Reset_Handler+0x74>)
   80194:	429a      	cmp	r2, r3
   80196:	d20a      	bcs.n	801ae <Reset_Handler+0x4a>
   80198:	3b01      	subs	r3, #1
   8019a:	1a9b      	subs	r3, r3, r2
   8019c:	f023 0303 	bic.w	r3, r3, #3
   801a0:	3304      	adds	r3, #4
   801a2:	4413      	add	r3, r2
                *pDest++ = 0;
   801a4:	2100      	movs	r1, #0
   801a6:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
   801aa:	4293      	cmp	r3, r2
   801ac:	d1fb      	bne.n	801a6 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   801ae:	4b0b      	ldr	r3, [pc, #44]	; (801dc <Reset_Handler+0x78>)
   801b0:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   801b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   801b8:	4a09      	ldr	r2, [pc, #36]	; (801e0 <Reset_Handler+0x7c>)
   801ba:	6093      	str	r3, [r2, #8]
        __libc_init_array();
   801bc:	4b09      	ldr	r3, [pc, #36]	; (801e4 <Reset_Handler+0x80>)
   801be:	4798      	blx	r3
        main();
   801c0:	4b09      	ldr	r3, [pc, #36]	; (801e8 <Reset_Handler+0x84>)
   801c2:	4798      	blx	r3
   801c4:	e7fe      	b.n	801c4 <Reset_Handler+0x60>
   801c6:	bf00      	nop
   801c8:	20000000 	.word	0x20000000
   801cc:	00080828 	.word	0x00080828
   801d0:	20000434 	.word	0x20000434
   801d4:	200004b8 	.word	0x200004b8
   801d8:	20000434 	.word	0x20000434
   801dc:	00080000 	.word	0x00080000
   801e0:	e000ed00 	.word	0xe000ed00
   801e4:	00080681 	.word	0x00080681
   801e8:	00080291 	.word	0x00080291

000801ec <SystemInit>:
 * Initialize the System and update the SystemFrequency variable.
 */
void SystemInit( void )
{
  /* Set FWS according to SYS_BOARD_MCKR configuration */
  EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   801ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
   801f0:	4a20      	ldr	r2, [pc, #128]	; (80274 <SystemInit+0x88>)
   801f2:	6013      	str	r3, [r2, #0]
  EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   801f4:	f502 7200 	add.w	r2, r2, #512	; 0x200
   801f8:	6013      	str	r3, [r2, #0]

  /* Initialize main oscillator */
  if ( !(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) )
   801fa:	4b1f      	ldr	r3, [pc, #124]	; (80278 <SystemInit+0x8c>)
   801fc:	6a1b      	ldr	r3, [r3, #32]
   801fe:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80202:	d107      	bne.n	80214 <SystemInit+0x28>
  {
    PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
   80204:	4a1d      	ldr	r2, [pc, #116]	; (8027c <SystemInit+0x90>)
   80206:	4b1c      	ldr	r3, [pc, #112]	; (80278 <SystemInit+0x8c>)
   80208:	621a      	str	r2, [r3, #32]
    while ( !(PMC->PMC_SR & PMC_SR_MOSCXTS) )
   8020a:	461a      	mov	r2, r3
   8020c:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8020e:	f013 0f01 	tst.w	r3, #1
   80212:	d0fb      	beq.n	8020c <SystemInit+0x20>
    {
    }
  }

  /* Switch to 3-20MHz Xtal oscillator */
  PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;
   80214:	4a1a      	ldr	r2, [pc, #104]	; (80280 <SystemInit+0x94>)
   80216:	4b18      	ldr	r3, [pc, #96]	; (80278 <SystemInit+0x8c>)
   80218:	621a      	str	r2, [r3, #32]

  while ( !(PMC->PMC_SR & PMC_SR_MOSCSELS) )
   8021a:	461a      	mov	r2, r3
   8021c:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8021e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   80222:	d0fb      	beq.n	8021c <SystemInit+0x30>
  {
  }
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80224:	4a14      	ldr	r2, [pc, #80]	; (80278 <SystemInit+0x8c>)
   80226:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80228:	f023 0303 	bic.w	r3, r3, #3
   8022c:	f043 0301 	orr.w	r3, r3, #1
   80230:	6313      	str	r3, [r2, #48]	; 0x30
  while (!(PMC->PMC_SR & PMC_SR_MCKRDY))
   80232:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80234:	f013 0f08 	tst.w	r3, #8
   80238:	d0fb      	beq.n	80232 <SystemInit+0x46>
  {
  }

  /* Initialize PLLA */
  PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
   8023a:	4a12      	ldr	r2, [pc, #72]	; (80284 <SystemInit+0x98>)
   8023c:	4b0e      	ldr	r3, [pc, #56]	; (80278 <SystemInit+0x8c>)
   8023e:	629a      	str	r2, [r3, #40]	; 0x28
  while ( !(PMC->PMC_SR & PMC_SR_LOCKA) )
   80240:	461a      	mov	r2, r3
   80242:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80244:	f013 0f02 	tst.w	r3, #2
   80248:	d0fb      	beq.n	80242 <SystemInit+0x56>
  {
  }

  /* Switch to main clock */
  PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   8024a:	2211      	movs	r2, #17
   8024c:	4b0a      	ldr	r3, [pc, #40]	; (80278 <SystemInit+0x8c>)
   8024e:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   80250:	461a      	mov	r2, r3
   80252:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80254:	f013 0f08 	tst.w	r3, #8
   80258:	d0fb      	beq.n	80252 <SystemInit+0x66>
  {
  }

  /* Switch to PLLA */
  PMC->PMC_MCKR = SYS_BOARD_MCKR;
   8025a:	2212      	movs	r2, #18
   8025c:	4b06      	ldr	r3, [pc, #24]	; (80278 <SystemInit+0x8c>)
   8025e:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   80260:	461a      	mov	r2, r3
   80262:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80264:	f013 0f08 	tst.w	r3, #8
   80268:	d0fb      	beq.n	80262 <SystemInit+0x76>
  {
  }

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
   8026a:	4a07      	ldr	r2, [pc, #28]	; (80288 <SystemInit+0x9c>)
   8026c:	4b07      	ldr	r3, [pc, #28]	; (8028c <SystemInit+0xa0>)
   8026e:	601a      	str	r2, [r3, #0]
   80270:	4770      	bx	lr
   80272:	bf00      	nop
   80274:	400e0a00 	.word	0x400e0a00
   80278:	400e0600 	.word	0x400e0600
   8027c:	00370809 	.word	0x00370809
   80280:	01370809 	.word	0x01370809
   80284:	200d3f01 	.word	0x200d3f01
   80288:	0501bd00 	.word	0x0501bd00
   8028c:	20000000 	.word	0x20000000

00080290 <main>:
#include "uart.h"
#include "printf-stdarg.h"


int main(void)
{
   80290:	b508      	push	{r3, lr}
    /* Initialize the SAM system */
    SystemInit();
   80292:	4b04      	ldr	r3, [pc, #16]	; (802a4 <main+0x14>)
   80294:	4798      	blx	r3
	configure_uart();
   80296:	4b04      	ldr	r3, [pc, #16]	; (802a8 <main+0x18>)
   80298:	4798      	blx	r3

    printf("Hello");
   8029a:	4804      	ldr	r0, [pc, #16]	; (802ac <main+0x1c>)
   8029c:	4b04      	ldr	r3, [pc, #16]	; (802b0 <main+0x20>)
   8029e:	4798      	blx	r3
}
   802a0:	2000      	movs	r0, #0
   802a2:	bd08      	pop	{r3, pc}
   802a4:	000801ed 	.word	0x000801ed
   802a8:	000805a1 	.word	0x000805a1
   802ac:	000807f0 	.word	0x000807f0
   802b0:	0008057d 	.word	0x0008057d

000802b4 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
   802b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   802b8:	460d      	mov	r5, r1
	register int pc = 0, padchar = ' ';

	if (width > 0) {
   802ba:	1e16      	subs	r6, r2, #0
   802bc:	dd48      	ble.n	80350 <prints+0x9c>
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
   802be:	780a      	ldrb	r2, [r1, #0]
   802c0:	2a00      	cmp	r2, #0
   802c2:	d035      	beq.n	80330 <prints+0x7c>
   802c4:	460a      	mov	r2, r1
   802c6:	2400      	movs	r4, #0
   802c8:	3401      	adds	r4, #1
   802ca:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   802ce:	2900      	cmp	r1, #0
   802d0:	d1fa      	bne.n	802c8 <prints+0x14>
		if (len >= width) width = 0;
   802d2:	42a6      	cmp	r6, r4
   802d4:	dc2d      	bgt.n	80332 <prints+0x7e>
   802d6:	2400      	movs	r4, #0
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
   802d8:	f003 0202 	and.w	r2, r3, #2
   802dc:	2a00      	cmp	r2, #0
   802de:	bf0c      	ite	eq
   802e0:	f04f 0820 	moveq.w	r8, #32
   802e4:	f04f 0830 	movne.w	r8, #48	; 0x30
	}
	if (!(pad & PAD_RIGHT)) {
   802e8:	f013 0301 	ands.w	r3, r3, #1
   802ec:	d123      	bne.n	80336 <prints+0x82>
		for ( ; width > 0; --width) {
   802ee:	2c00      	cmp	r4, #0
   802f0:	dd28      	ble.n	80344 <prints+0x90>
   802f2:	4626      	mov	r6, r4
	(void) uart_putchar(c);  //Send characters to uart
   802f4:	fa5f f988 	uxtb.w	r9, r8
   802f8:	4f18      	ldr	r7, [pc, #96]	; (8035c <prints+0xa8>)
   802fa:	4648      	mov	r0, r9
   802fc:	47b8      	blx	r7
		for ( ; width > 0; --width) {
   802fe:	3e01      	subs	r6, #1
   80300:	d1fb      	bne.n	802fa <prints+0x46>
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
   80302:	7828      	ldrb	r0, [r5, #0]
   80304:	b188      	cbz	r0, 8032a <prints+0x76>
	(void) uart_putchar(c);  //Send characters to uart
   80306:	4f15      	ldr	r7, [pc, #84]	; (8035c <prints+0xa8>)
   80308:	47b8      	blx	r7
		printchar (out, *string);
		++pc;
   8030a:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
   8030c:	f815 0f01 	ldrb.w	r0, [r5, #1]!
   80310:	2800      	cmp	r0, #0
   80312:	d1f9      	bne.n	80308 <prints+0x54>
	}
	for ( ; width > 0; --width) {
   80314:	2e00      	cmp	r6, #0
   80316:	dd08      	ble.n	8032a <prints+0x76>
   80318:	4635      	mov	r5, r6
	(void) uart_putchar(c);  //Send characters to uart
   8031a:	fa5f f888 	uxtb.w	r8, r8
   8031e:	4f0f      	ldr	r7, [pc, #60]	; (8035c <prints+0xa8>)
   80320:	4640      	mov	r0, r8
   80322:	47b8      	blx	r7
	for ( ; width > 0; --width) {
   80324:	3d01      	subs	r5, #1
   80326:	d1fb      	bne.n	80320 <prints+0x6c>
   80328:	4434      	add	r4, r6
		printchar (out, padchar);
		++pc;
	}

	return pc;
}
   8032a:	4620      	mov	r0, r4
   8032c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		for (ptr = string; *ptr; ++ptr) ++len;
   80330:	2400      	movs	r4, #0
		else width -= len;
   80332:	1b34      	subs	r4, r6, r4
   80334:	e7d0      	b.n	802d8 <prints+0x24>
   80336:	4626      	mov	r6, r4
	for ( ; *string ; ++string) {
   80338:	7828      	ldrb	r0, [r5, #0]
   8033a:	b108      	cbz	r0, 80340 <prints+0x8c>
	register int pc = 0, padchar = ' ';
   8033c:	2400      	movs	r4, #0
   8033e:	e7e2      	b.n	80306 <prints+0x52>
   80340:	2400      	movs	r4, #0
   80342:	e7e7      	b.n	80314 <prints+0x60>
		for ( ; width > 0; --width) {
   80344:	4626      	mov	r6, r4
   80346:	461c      	mov	r4, r3
   80348:	e7db      	b.n	80302 <prints+0x4e>
	register int pc = 0, padchar = ' ';
   8034a:	f04f 0820 	mov.w	r8, #32
   8034e:	e7d8      	b.n	80302 <prints+0x4e>
	if (!(pad & PAD_RIGHT)) {
   80350:	f013 0401 	ands.w	r4, r3, #1
   80354:	d0f9      	beq.n	8034a <prints+0x96>
	register int pc = 0, padchar = ' ';
   80356:	f04f 0820 	mov.w	r8, #32
   8035a:	e7ed      	b.n	80338 <prints+0x84>
   8035c:	00080609 	.word	0x00080609

00080360 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
   80360:	b5f0      	push	{r4, r5, r6, r7, lr}
   80362:	b085      	sub	sp, #20
   80364:	4607      	mov	r7, r0
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;

	if (i == 0) {
   80366:	b381      	cbz	r1, 803ca <printi+0x6a>
   80368:	460c      	mov	r4, r1
		print_buf[0] = '0';
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
   8036a:	b10b      	cbz	r3, 80370 <printi+0x10>
   8036c:	2a0a      	cmp	r2, #10
   8036e:	d038      	beq.n	803e2 <printi+0x82>
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
   80370:	2300      	movs	r3, #0
   80372:	f88d 300f 	strb.w	r3, [sp, #15]

	while (u) {
   80376:	2600      	movs	r6, #0
   80378:	2900      	cmp	r1, #0
   8037a:	d046      	beq.n	8040a <printi+0xaa>
   8037c:	f10d 050f 	add.w	r5, sp, #15
		t = u % b;
		if( t >= 10 )
			t += letbase - '0' - 10;
   80380:	990c      	ldr	r1, [sp, #48]	; 0x30
   80382:	393a      	subs	r1, #58	; 0x3a
		t = u % b;
   80384:	fbb4 f3f2 	udiv	r3, r4, r2
   80388:	fb02 4313 	mls	r3, r2, r3, r4
		if( t >= 10 )
   8038c:	2b09      	cmp	r3, #9
			t += letbase - '0' - 10;
   8038e:	bfc8      	it	gt
   80390:	185b      	addgt	r3, r3, r1
		*--s = t + '0';
   80392:	3330      	adds	r3, #48	; 0x30
   80394:	f805 3d01 	strb.w	r3, [r5, #-1]!
		u /= b;
   80398:	fbb4 f4f2 	udiv	r4, r4, r2
	while (u) {
   8039c:	2c00      	cmp	r4, #0
   8039e:	d1f1      	bne.n	80384 <printi+0x24>
	}

	if (neg) {
   803a0:	b156      	cbz	r6, 803b8 <printi+0x58>
		if( width && (pad & PAD_ZERO) ) {
   803a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   803a4:	b11b      	cbz	r3, 803ae <printi+0x4e>
   803a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   803a8:	f013 0f02 	tst.w	r3, #2
   803ac:	d125      	bne.n	803fa <printi+0x9a>
			printchar (out, '-');
			++pc;
			--width;
		}
		else {
			*--s = '-';
   803ae:	232d      	movs	r3, #45	; 0x2d
   803b0:	f805 3c01 	strb.w	r3, [r5, #-1]
   803b4:	3d01      	subs	r5, #1
	register int t, neg = 0, pc = 0;
   803b6:	2600      	movs	r6, #0
		}
	}

	return pc + prints (out, s, width, pad);
   803b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   803ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   803bc:	4629      	mov	r1, r5
   803be:	4638      	mov	r0, r7
   803c0:	4c14      	ldr	r4, [pc, #80]	; (80414 <printi+0xb4>)
   803c2:	47a0      	blx	r4
   803c4:	4430      	add	r0, r6
}
   803c6:	b005      	add	sp, #20
   803c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		print_buf[0] = '0';
   803ca:	2330      	movs	r3, #48	; 0x30
   803cc:	f88d 3004 	strb.w	r3, [sp, #4]
		print_buf[1] = '\0';
   803d0:	2300      	movs	r3, #0
   803d2:	f88d 3005 	strb.w	r3, [sp, #5]
		return prints (out, print_buf, width, pad);
   803d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   803d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   803da:	a901      	add	r1, sp, #4
   803dc:	4c0d      	ldr	r4, [pc, #52]	; (80414 <printi+0xb4>)
   803de:	47a0      	blx	r4
   803e0:	e7f1      	b.n	803c6 <printi+0x66>
	if (sg && b == 10 && i < 0) {
   803e2:	2900      	cmp	r1, #0
   803e4:	dac4      	bge.n	80370 <printi+0x10>
		u = -i;
   803e6:	424c      	negs	r4, r1
	*s = '\0';
   803e8:	2300      	movs	r3, #0
   803ea:	f88d 300f 	strb.w	r3, [sp, #15]
	s = print_buf + PRINT_BUF_LEN-1;
   803ee:	f10d 050f 	add.w	r5, sp, #15
	while (u) {
   803f2:	2c00      	cmp	r4, #0
   803f4:	d0d5      	beq.n	803a2 <printi+0x42>
		neg = 1;
   803f6:	2601      	movs	r6, #1
   803f8:	e7c0      	b.n	8037c <printi+0x1c>
	(void) uart_putchar(c);  //Send characters to uart
   803fa:	202d      	movs	r0, #45	; 0x2d
   803fc:	4b06      	ldr	r3, [pc, #24]	; (80418 <printi+0xb8>)
   803fe:	4798      	blx	r3
			--width;
   80400:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80402:	3b01      	subs	r3, #1
   80404:	930a      	str	r3, [sp, #40]	; 0x28
			++pc;
   80406:	2601      	movs	r6, #1
			--width;
   80408:	e7d6      	b.n	803b8 <printi+0x58>
	register int t, neg = 0, pc = 0;
   8040a:	461e      	mov	r6, r3
	s = print_buf + PRINT_BUF_LEN-1;
   8040c:	f10d 050f 	add.w	r5, sp, #15
   80410:	e7d2      	b.n	803b8 <printi+0x58>
   80412:	bf00      	nop
   80414:	000802b5 	.word	0x000802b5
   80418:	00080609 	.word	0x00080609

0008041c <print>:

static int print( char **out, const char *format, va_list args )
{
   8041c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80420:	b087      	sub	sp, #28
   80422:	4680      	mov	r8, r0
	register int width, pad;
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
   80424:	780b      	ldrb	r3, [r1, #0]
   80426:	2b00      	cmp	r3, #0
   80428:	f000 8094 	beq.w	80554 <print+0x138>
   8042c:	468b      	mov	fp, r1
   8042e:	4617      	mov	r7, r2
   80430:	2500      	movs	r5, #0
	(void) uart_putchar(c);  //Send characters to uart
   80432:	4e4e      	ldr	r6, [pc, #312]	; (8056c <print+0x150>)
			}
			if( *format == 'c' ) {
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
				scr[1] = '\0';
				pc += prints (out, scr, width, pad);
   80434:	f8df a13c 	ldr.w	sl, [pc, #316]	; 80574 <print+0x158>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   80438:	f8df 913c 	ldr.w	r9, [pc, #316]	; 80578 <print+0x15c>
   8043c:	e046      	b.n	804cc <print+0xb0>
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   8043e:	2200      	movs	r2, #0
   80440:	e070      	b.n	80524 <print+0x108>
				register char *s = (char *)va_arg( args, int );
   80442:	6839      	ldr	r1, [r7, #0]
   80444:	3704      	adds	r7, #4
				pc += prints (out, s?s:"(null)", width, pad);
   80446:	484a      	ldr	r0, [pc, #296]	; (80570 <print+0x154>)
   80448:	2900      	cmp	r1, #0
   8044a:	bf08      	it	eq
   8044c:	4601      	moveq	r1, r0
   8044e:	4640      	mov	r0, r8
   80450:	47d0      	blx	sl
   80452:	4405      	add	r5, r0
				continue;
   80454:	e035      	b.n	804c2 <print+0xa6>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
   80456:	6839      	ldr	r1, [r7, #0]
   80458:	3704      	adds	r7, #4
   8045a:	2061      	movs	r0, #97	; 0x61
   8045c:	9002      	str	r0, [sp, #8]
   8045e:	9301      	str	r3, [sp, #4]
   80460:	9200      	str	r2, [sp, #0]
   80462:	2301      	movs	r3, #1
   80464:	220a      	movs	r2, #10
   80466:	4640      	mov	r0, r8
   80468:	47c8      	blx	r9
   8046a:	4405      	add	r5, r0
				continue;
   8046c:	e029      	b.n	804c2 <print+0xa6>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
   8046e:	6839      	ldr	r1, [r7, #0]
   80470:	3704      	adds	r7, #4
   80472:	2061      	movs	r0, #97	; 0x61
   80474:	9002      	str	r0, [sp, #8]
   80476:	9301      	str	r3, [sp, #4]
   80478:	9200      	str	r2, [sp, #0]
   8047a:	2300      	movs	r3, #0
   8047c:	2210      	movs	r2, #16
   8047e:	4640      	mov	r0, r8
   80480:	47c8      	blx	r9
   80482:	4405      	add	r5, r0
				continue;
   80484:	e01d      	b.n	804c2 <print+0xa6>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
   80486:	6839      	ldr	r1, [r7, #0]
   80488:	3704      	adds	r7, #4
   8048a:	2041      	movs	r0, #65	; 0x41
   8048c:	9002      	str	r0, [sp, #8]
   8048e:	9301      	str	r3, [sp, #4]
   80490:	9200      	str	r2, [sp, #0]
   80492:	2300      	movs	r3, #0
   80494:	2210      	movs	r2, #16
   80496:	4640      	mov	r0, r8
   80498:	47c8      	blx	r9
   8049a:	4405      	add	r5, r0
				continue;
   8049c:	e011      	b.n	804c2 <print+0xa6>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   8049e:	6839      	ldr	r1, [r7, #0]
   804a0:	3704      	adds	r7, #4
   804a2:	2061      	movs	r0, #97	; 0x61
   804a4:	9002      	str	r0, [sp, #8]
   804a6:	9301      	str	r3, [sp, #4]
   804a8:	9200      	str	r2, [sp, #0]
   804aa:	2300      	movs	r3, #0
   804ac:	220a      	movs	r2, #10
   804ae:	4640      	mov	r0, r8
   804b0:	47c8      	blx	r9
   804b2:	4405      	add	r5, r0
				continue;
   804b4:	e005      	b.n	804c2 <print+0xa6>
			++format;
   804b6:	46a3      	mov	fp, r4
	(void) uart_putchar(c);  //Send characters to uart
   804b8:	f89b 0000 	ldrb.w	r0, [fp]
   804bc:	47b0      	blx	r6
			}
		}
		else {
		out:
			printchar (out, *format);
			++pc;
   804be:	3501      	adds	r5, #1
   804c0:	465c      	mov	r4, fp
	for (; *format != 0; ++format) {
   804c2:	f104 0b01 	add.w	fp, r4, #1
   804c6:	7863      	ldrb	r3, [r4, #1]
   804c8:	2b00      	cmp	r3, #0
   804ca:	d044      	beq.n	80556 <print+0x13a>
		if (*format == '%') {
   804cc:	2b25      	cmp	r3, #37	; 0x25
   804ce:	d1f3      	bne.n	804b8 <print+0x9c>
			++format;
   804d0:	f10b 0401 	add.w	r4, fp, #1
			if (*format == '\0') break;
   804d4:	f89b 3001 	ldrb.w	r3, [fp, #1]
   804d8:	2b00      	cmp	r3, #0
   804da:	d03c      	beq.n	80556 <print+0x13a>
			if (*format == '%') goto out;
   804dc:	2b25      	cmp	r3, #37	; 0x25
   804de:	d0ea      	beq.n	804b6 <print+0x9a>
			if (*format == '-') {
   804e0:	2b2d      	cmp	r3, #45	; 0x2d
				++format;
   804e2:	bf06      	itte	eq
   804e4:	f10b 0402 	addeq.w	r4, fp, #2
				pad = PAD_RIGHT;
   804e8:	2301      	moveq	r3, #1
			width = pad = 0;
   804ea:	2300      	movne	r3, #0
			while (*format == '0') {
   804ec:	7822      	ldrb	r2, [r4, #0]
   804ee:	2a30      	cmp	r2, #48	; 0x30
   804f0:	d105      	bne.n	804fe <print+0xe2>
				pad |= PAD_ZERO;
   804f2:	f043 0302 	orr.w	r3, r3, #2
			while (*format == '0') {
   804f6:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   804fa:	2a30      	cmp	r2, #48	; 0x30
   804fc:	d0f9      	beq.n	804f2 <print+0xd6>
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   804fe:	7821      	ldrb	r1, [r4, #0]
   80500:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   80504:	b2d2      	uxtb	r2, r2
   80506:	2a09      	cmp	r2, #9
   80508:	d899      	bhi.n	8043e <print+0x22>
   8050a:	2200      	movs	r2, #0
				width *= 10;
   8050c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
				width += *format - '0';
   80510:	3930      	subs	r1, #48	; 0x30
   80512:	eb01 0242 	add.w	r2, r1, r2, lsl #1
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   80516:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   8051a:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   8051e:	b2c0      	uxtb	r0, r0
   80520:	2809      	cmp	r0, #9
   80522:	d9f3      	bls.n	8050c <print+0xf0>
			if( *format == 's' ) {
   80524:	2973      	cmp	r1, #115	; 0x73
   80526:	d08c      	beq.n	80442 <print+0x26>
			if( *format == 'd' ) {
   80528:	2964      	cmp	r1, #100	; 0x64
   8052a:	d094      	beq.n	80456 <print+0x3a>
			if( *format == 'x' ) {
   8052c:	2978      	cmp	r1, #120	; 0x78
   8052e:	d09e      	beq.n	8046e <print+0x52>
			if( *format == 'X' ) {
   80530:	2958      	cmp	r1, #88	; 0x58
   80532:	d0a8      	beq.n	80486 <print+0x6a>
			if( *format == 'u' ) {
   80534:	2975      	cmp	r1, #117	; 0x75
   80536:	d0b2      	beq.n	8049e <print+0x82>
			if( *format == 'c' ) {
   80538:	2963      	cmp	r1, #99	; 0x63
   8053a:	d1c2      	bne.n	804c2 <print+0xa6>
				scr[0] = (char)va_arg( args, int );
   8053c:	6839      	ldr	r1, [r7, #0]
   8053e:	3704      	adds	r7, #4
   80540:	f88d 1014 	strb.w	r1, [sp, #20]
				scr[1] = '\0';
   80544:	2100      	movs	r1, #0
   80546:	f88d 1015 	strb.w	r1, [sp, #21]
				pc += prints (out, scr, width, pad);
   8054a:	a905      	add	r1, sp, #20
   8054c:	4640      	mov	r0, r8
   8054e:	47d0      	blx	sl
   80550:	4405      	add	r5, r0
				continue;
   80552:	e7b6      	b.n	804c2 <print+0xa6>
	register int pc = 0;
   80554:	2500      	movs	r5, #0
		}
	}
	if (out) **out = '\0';
   80556:	f1b8 0f00 	cmp.w	r8, #0
   8055a:	d003      	beq.n	80564 <print+0x148>
   8055c:	f8d8 3000 	ldr.w	r3, [r8]
   80560:	2200      	movs	r2, #0
   80562:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
}
   80564:	4628      	mov	r0, r5
   80566:	b007      	add	sp, #28
   80568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8056c:	00080609 	.word	0x00080609
   80570:	000807f8 	.word	0x000807f8
   80574:	000802b5 	.word	0x000802b5
   80578:	00080361 	.word	0x00080361

0008057c <printf>:

int printf(const char *format, ...)
{
   8057c:	b40f      	push	{r0, r1, r2, r3}
   8057e:	b500      	push	{lr}
   80580:	b083      	sub	sp, #12
   80582:	aa04      	add	r2, sp, #16
   80584:	f852 1b04 	ldr.w	r1, [r2], #4
        va_list args;
        
        va_start( args, format );
   80588:	9201      	str	r2, [sp, #4]
        return print( 0, format, args );
   8058a:	2000      	movs	r0, #0
   8058c:	4b03      	ldr	r3, [pc, #12]	; (8059c <printf+0x20>)
   8058e:	4798      	blx	r3
}
   80590:	b003      	add	sp, #12
   80592:	f85d eb04 	ldr.w	lr, [sp], #4
   80596:	b004      	add	sp, #16
   80598:	4770      	bx	lr
   8059a:	bf00      	nop
   8059c:	0008041d 	.word	0x0008041d

000805a0 <configure_uart>:
	uint32_t ul_sr;

/*
Initialize UART ring buffer as empty
*/
rx_buffer.head=0;
   805a0:	4b16      	ldr	r3, [pc, #88]	; (805fc <configure_uart+0x5c>)
   805a2:	2200      	movs	r2, #0
   805a4:	701a      	strb	r2, [r3, #0]
rx_buffer.tail=0;
   805a6:	705a      	strb	r2, [r3, #1]
/*
Initialize UART communication
*/
	// Pin configuration
	// Disable interrupts on Uart receive (URXD) and transmit (UTXD) pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   805a8:	4b15      	ldr	r3, [pc, #84]	; (80600 <configure_uart+0x60>)
   805aa:	f44f 7140 	mov.w	r1, #768	; 0x300
   805ae:	6459      	str	r1, [r3, #68]	; 0x44

	// Disable the Parallel IO (PIO) of the URXD and UTXD pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   805b0:	6059      	str	r1, [r3, #4]

	// Read current peripheral AB select register and set the UTXD and URXD pins to 0 (UART is connected as peripheral A)
	ul_sr = PIOA->PIO_ABSR;
   805b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	PIOA->PIO_ABSR &= ~(PIO_PA8A_URXD | PIO_PA9A_UTXD) & ul_sr;
   805b4:	6f18      	ldr	r0, [r3, #112]	; 0x70
   805b6:	4002      	ands	r2, r0
   805b8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   805bc:	671a      	str	r2, [r3, #112]	; 0x70

	// Enable pull up resistor on URXD and UTXD pin
	PIOA->PIO_PUER = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   805be:	6659      	str	r1, [r3, #100]	; 0x64

	// Uart configuration
	
	// Enable the peripheral UART controller in Power Management Controller (PMC)
	PMC->PMC_PCER0 = 1 << ID_UART;
   805c0:	f44f 7280 	mov.w	r2, #256	; 0x100
   805c4:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   805c8:	611a      	str	r2, [r3, #16]

	// Reset and disable receiver and transmitter
	UART->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX | UART_CR_RXDIS | UART_CR_TXDIS;
   805ca:	f503 7300 	add.w	r3, r3, #512	; 0x200
   805ce:	21ac      	movs	r1, #172	; 0xac
   805d0:	6019      	str	r1, [r3, #0]

	// Set the baudrate
	UART->UART_BRGR = 547; // MCK / 16 * x = BaudRate (write x into UART_BRGR)  
   805d2:	f240 2123 	movw	r1, #547	; 0x223
   805d6:	6219      	str	r1, [r3, #32]

	// No parity bits
	UART->UART_MR = UART_MR_PAR_NO | UART_MR_CHMODE_NORMAL;	
   805d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
   805dc:	6059      	str	r1, [r3, #4]

	// Disable PDC channel
	UART->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   805de:	f240 2102 	movw	r1, #514	; 0x202
   805e2:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120

	// Configure interrupts on receive ready and errors
	UART->UART_IDR = 0xFFFFFFFF;
   805e6:	f04f 31ff 	mov.w	r1, #4294967295
   805ea:	60d9      	str	r1, [r3, #12]
	UART->UART_IER = UART_IER_RXRDY | UART_IER_OVRE | UART_IER_FRAME | UART_IER_PARE;
   805ec:	21e1      	movs	r1, #225	; 0xe1
   805ee:	6099      	str	r1, [r3, #8]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   805f0:	4904      	ldr	r1, [pc, #16]	; (80604 <configure_uart+0x64>)
   805f2:	600a      	str	r2, [r1, #0]

	// Enable UART interrupt in the Nested Vectored Interrupt Controller(NVIC)
	NVIC_EnableIRQ((IRQn_Type) ID_UART);

	// Enable UART receiver and transmitter
	UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   805f4:	2250      	movs	r2, #80	; 0x50
   805f6:	601a      	str	r2, [r3, #0]
   805f8:	4770      	bx	lr
   805fa:	bf00      	nop
   805fc:	20000450 	.word	0x20000450
   80600:	400e0e00 	.word	0x400e0e00
   80604:	e000e100 	.word	0xe000e100

00080608 <uart_putchar>:
 * \retval Success(0) or failure(1).
 */
int uart_putchar(const uint8_t c)
{
	// Check if the transmitter is ready
	if((UART->UART_SR & UART_SR_TXRDY) != UART_SR_TXRDY)
   80608:	4b07      	ldr	r3, [pc, #28]	; (80628 <uart_putchar+0x20>)
   8060a:	695b      	ldr	r3, [r3, #20]
   8060c:	f013 0f02 	tst.w	r3, #2
   80610:	d008      	beq.n	80624 <uart_putchar+0x1c>
	return 1;

	// Send the character
	UART->UART_THR = c;
   80612:	4b05      	ldr	r3, [pc, #20]	; (80628 <uart_putchar+0x20>)
   80614:	61d8      	str	r0, [r3, #28]
	while(!((UART->UART_SR) & UART_SR_TXEMPTY)); // Wait for the character to be sent, can implement ring buffer to remove the wait
   80616:	461a      	mov	r2, r3
   80618:	6953      	ldr	r3, [r2, #20]
   8061a:	f413 7f00 	tst.w	r3, #512	; 0x200
   8061e:	d0fb      	beq.n	80618 <uart_putchar+0x10>
	return 0;
   80620:	2000      	movs	r0, #0
   80622:	4770      	bx	lr
	return 1;
   80624:	2001      	movs	r0, #1
}
   80626:	4770      	bx	lr
   80628:	400e0800 	.word	0x400e0800

0008062c <UART_Handler>:

void UART_Handler(void)
{
	uint32_t status = UART->UART_SR;
   8062c:	4b12      	ldr	r3, [pc, #72]	; (80678 <UART_Handler+0x4c>)
   8062e:	695b      	ldr	r3, [r3, #20]
	
	//Reset UART at overflow error and frame error
	if(status & (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE))
   80630:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   80634:	d003      	beq.n	8063e <UART_Handler+0x12>
	{
		UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN | UART_CR_RSTSTA;
   80636:	f44f 71a8 	mov.w	r1, #336	; 0x150
   8063a:	4a0f      	ldr	r2, [pc, #60]	; (80678 <UART_Handler+0x4c>)
   8063c:	6011      	str	r1, [r2, #0]
	}
	
	//Check if message is ready to be received
	if(status & UART_SR_RXRDY)
   8063e:	f013 0f01 	tst.w	r3, #1
   80642:	d012      	beq.n	8066a <UART_Handler+0x3e>
	{
		//Check if receive ring buffer is full and 
		if((rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE == rx_buffer.head)
   80644:	480d      	ldr	r0, [pc, #52]	; (8067c <UART_Handler+0x50>)
   80646:	7842      	ldrb	r2, [r0, #1]
   80648:	1c53      	adds	r3, r2, #1
   8064a:	4259      	negs	r1, r3
   8064c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   80650:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   80654:	bf58      	it	pl
   80656:	424b      	negpl	r3, r1
   80658:	7801      	ldrb	r1, [r0, #0]
   8065a:	428b      	cmp	r3, r1
   8065c:	d006      	beq.n	8066c <UART_Handler+0x40>
		{
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
			return;
		}
		rx_buffer.data[rx_buffer.tail] = UART->UART_RHR;
   8065e:	4906      	ldr	r1, [pc, #24]	; (80678 <UART_Handler+0x4c>)
   80660:	6988      	ldr	r0, [r1, #24]
   80662:	4906      	ldr	r1, [pc, #24]	; (8067c <UART_Handler+0x50>)
   80664:	440a      	add	r2, r1
   80666:	7090      	strb	r0, [r2, #2]
		rx_buffer.tail = (rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE;
   80668:	704b      	strb	r3, [r1, #1]
   8066a:	4770      	bx	lr
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
   8066c:	4b02      	ldr	r3, [pc, #8]	; (80678 <UART_Handler+0x4c>)
   8066e:	6999      	ldr	r1, [r3, #24]
   80670:	4402      	add	r2, r0
   80672:	7091      	strb	r1, [r2, #2]
			return;
   80674:	4770      	bx	lr
   80676:	bf00      	nop
   80678:	400e0800 	.word	0x400e0800
   8067c:	20000450 	.word	0x20000450

00080680 <__libc_init_array>:
   80680:	b570      	push	{r4, r5, r6, lr}
   80682:	4e0f      	ldr	r6, [pc, #60]	; (806c0 <__libc_init_array+0x40>)
   80684:	4d0f      	ldr	r5, [pc, #60]	; (806c4 <__libc_init_array+0x44>)
   80686:	1b76      	subs	r6, r6, r5
   80688:	10b6      	asrs	r6, r6, #2
   8068a:	bf18      	it	ne
   8068c:	2400      	movne	r4, #0
   8068e:	d005      	beq.n	8069c <__libc_init_array+0x1c>
   80690:	3401      	adds	r4, #1
   80692:	f855 3b04 	ldr.w	r3, [r5], #4
   80696:	4798      	blx	r3
   80698:	42a6      	cmp	r6, r4
   8069a:	d1f9      	bne.n	80690 <__libc_init_array+0x10>
   8069c:	4e0a      	ldr	r6, [pc, #40]	; (806c8 <__libc_init_array+0x48>)
   8069e:	4d0b      	ldr	r5, [pc, #44]	; (806cc <__libc_init_array+0x4c>)
   806a0:	f000 f8b0 	bl	80804 <_init>
   806a4:	1b76      	subs	r6, r6, r5
   806a6:	10b6      	asrs	r6, r6, #2
   806a8:	bf18      	it	ne
   806aa:	2400      	movne	r4, #0
   806ac:	d006      	beq.n	806bc <__libc_init_array+0x3c>
   806ae:	3401      	adds	r4, #1
   806b0:	f855 3b04 	ldr.w	r3, [r5], #4
   806b4:	4798      	blx	r3
   806b6:	42a6      	cmp	r6, r4
   806b8:	d1f9      	bne.n	806ae <__libc_init_array+0x2e>
   806ba:	bd70      	pop	{r4, r5, r6, pc}
   806bc:	bd70      	pop	{r4, r5, r6, pc}
   806be:	bf00      	nop
   806c0:	00080810 	.word	0x00080810
   806c4:	00080810 	.word	0x00080810
   806c8:	00080818 	.word	0x00080818
   806cc:	00080810 	.word	0x00080810

000806d0 <register_fini>:
   806d0:	4b02      	ldr	r3, [pc, #8]	; (806dc <register_fini+0xc>)
   806d2:	b113      	cbz	r3, 806da <register_fini+0xa>
   806d4:	4802      	ldr	r0, [pc, #8]	; (806e0 <register_fini+0x10>)
   806d6:	f000 b805 	b.w	806e4 <atexit>
   806da:	4770      	bx	lr
   806dc:	00000000 	.word	0x00000000
   806e0:	000806f1 	.word	0x000806f1

000806e4 <atexit>:
   806e4:	2300      	movs	r3, #0
   806e6:	4601      	mov	r1, r0
   806e8:	461a      	mov	r2, r3
   806ea:	4618      	mov	r0, r3
   806ec:	f000 b81e 	b.w	8072c <__register_exitproc>

000806f0 <__libc_fini_array>:
   806f0:	b538      	push	{r3, r4, r5, lr}
   806f2:	4c0a      	ldr	r4, [pc, #40]	; (8071c <__libc_fini_array+0x2c>)
   806f4:	4d0a      	ldr	r5, [pc, #40]	; (80720 <__libc_fini_array+0x30>)
   806f6:	1b64      	subs	r4, r4, r5
   806f8:	10a4      	asrs	r4, r4, #2
   806fa:	d00a      	beq.n	80712 <__libc_fini_array+0x22>
   806fc:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   80700:	3b01      	subs	r3, #1
   80702:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   80706:	3c01      	subs	r4, #1
   80708:	f855 3904 	ldr.w	r3, [r5], #-4
   8070c:	4798      	blx	r3
   8070e:	2c00      	cmp	r4, #0
   80710:	d1f9      	bne.n	80706 <__libc_fini_array+0x16>
   80712:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   80716:	f000 b87f 	b.w	80818 <_fini>
   8071a:	bf00      	nop
   8071c:	00080828 	.word	0x00080828
   80720:	00080824 	.word	0x00080824

00080724 <__retarget_lock_acquire_recursive>:
   80724:	4770      	bx	lr
   80726:	bf00      	nop

00080728 <__retarget_lock_release_recursive>:
   80728:	4770      	bx	lr
   8072a:	bf00      	nop

0008072c <__register_exitproc>:
   8072c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80730:	4d2c      	ldr	r5, [pc, #176]	; (807e4 <__register_exitproc+0xb8>)
   80732:	4606      	mov	r6, r0
   80734:	6828      	ldr	r0, [r5, #0]
   80736:	4698      	mov	r8, r3
   80738:	460f      	mov	r7, r1
   8073a:	4691      	mov	r9, r2
   8073c:	f7ff fff2 	bl	80724 <__retarget_lock_acquire_recursive>
   80740:	4b29      	ldr	r3, [pc, #164]	; (807e8 <__register_exitproc+0xbc>)
   80742:	681c      	ldr	r4, [r3, #0]
   80744:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   80748:	2b00      	cmp	r3, #0
   8074a:	d03e      	beq.n	807ca <__register_exitproc+0x9e>
   8074c:	685a      	ldr	r2, [r3, #4]
   8074e:	2a1f      	cmp	r2, #31
   80750:	dc1c      	bgt.n	8078c <__register_exitproc+0x60>
   80752:	f102 0e01 	add.w	lr, r2, #1
   80756:	b176      	cbz	r6, 80776 <__register_exitproc+0x4a>
   80758:	2101      	movs	r1, #1
   8075a:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   8075e:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   80762:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   80766:	4091      	lsls	r1, r2
   80768:	4308      	orrs	r0, r1
   8076a:	2e02      	cmp	r6, #2
   8076c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80770:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   80774:	d023      	beq.n	807be <__register_exitproc+0x92>
   80776:	3202      	adds	r2, #2
   80778:	f8c3 e004 	str.w	lr, [r3, #4]
   8077c:	6828      	ldr	r0, [r5, #0]
   8077e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   80782:	f7ff ffd1 	bl	80728 <__retarget_lock_release_recursive>
   80786:	2000      	movs	r0, #0
   80788:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8078c:	4b17      	ldr	r3, [pc, #92]	; (807ec <__register_exitproc+0xc0>)
   8078e:	b30b      	cbz	r3, 807d4 <__register_exitproc+0xa8>
   80790:	f44f 70c8 	mov.w	r0, #400	; 0x190
   80794:	f3af 8000 	nop.w
   80798:	4603      	mov	r3, r0
   8079a:	b1d8      	cbz	r0, 807d4 <__register_exitproc+0xa8>
   8079c:	2000      	movs	r0, #0
   8079e:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   807a2:	f04f 0e01 	mov.w	lr, #1
   807a6:	6058      	str	r0, [r3, #4]
   807a8:	6019      	str	r1, [r3, #0]
   807aa:	4602      	mov	r2, r0
   807ac:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   807b0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   807b4:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   807b8:	2e00      	cmp	r6, #0
   807ba:	d0dc      	beq.n	80776 <__register_exitproc+0x4a>
   807bc:	e7cc      	b.n	80758 <__register_exitproc+0x2c>
   807be:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   807c2:	4301      	orrs	r1, r0
   807c4:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   807c8:	e7d5      	b.n	80776 <__register_exitproc+0x4a>
   807ca:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   807ce:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   807d2:	e7bb      	b.n	8074c <__register_exitproc+0x20>
   807d4:	6828      	ldr	r0, [r5, #0]
   807d6:	f7ff ffa7 	bl	80728 <__retarget_lock_release_recursive>
   807da:	f04f 30ff 	mov.w	r0, #4294967295
   807de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   807e2:	bf00      	nop
   807e4:	20000430 	.word	0x20000430
   807e8:	00080800 	.word	0x00080800
   807ec:	00000000 	.word	0x00000000
   807f0:	6c6c6548 	.word	0x6c6c6548
   807f4:	0000006f 	.word	0x0000006f
   807f8:	6c756e28 	.word	0x6c756e28
   807fc:	0000296c 	.word	0x0000296c

00080800 <_global_impure_ptr>:
   80800:	20000008                                ... 

00080804 <_init>:
   80804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80806:	bf00      	nop
   80808:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8080a:	bc08      	pop	{r3}
   8080c:	469e      	mov	lr, r3
   8080e:	4770      	bx	lr

00080810 <__init_array_start>:
   80810:	000806d1 	.word	0x000806d1

00080814 <__frame_dummy_init_array_entry>:
   80814:	00080119                                ....

00080818 <_fini>:
   80818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8081a:	bf00      	nop
   8081c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8081e:	bc08      	pop	{r3}
   80820:	469e      	mov	lr, r3
   80822:	4770      	bx	lr

00080824 <__fini_array_start>:
   80824:	000800f5 	.word	0x000800f5
